package com.swh.discordBot;

import com.sedmelluq.discord.lavaplayer.player.AudioLoadResultHandler;
import com.sedmelluq.discord.lavaplayer.player.AudioPlayerManager;
import com.sedmelluq.discord.lavaplayer.player.DefaultAudioPlayerManager;
import com.sedmelluq.discord.lavaplayer.source.AudioSourceManagers;
import com.sedmelluq.discord.lavaplayer.tools.FriendlyException;
import com.sedmelluq.discord.lavaplayer.track.AudioPlaylist;
import com.sedmelluq.discord.lavaplayer.track.AudioTrack;
import events.music.base.GuildMusicManager;
import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.entities.Guild;
import net.dv8tion.jda.api.entities.TextChannel;

import java.util.HashMap;

public class MusicSetup {
    private AudioPlayerManager manager;
    private HashMap<Long, GuildMusicManager> musicManagers;

    public MusicSetup() {
        musicManagers = new HashMap<>();
        manager = new DefaultAudioPlayerManager();
        AudioSourceManagers.registerLocalSource(manager);
        AudioSourceManagers.registerRemoteSources(manager);
    }

    public synchronized GuildMusicManager getGuildMusicManager(Guild guild) {
        Long id = guild.getIdLong();
        GuildMusicManager musicManager = musicManagers.get(id);

        if (musicManager == null) {
            musicManager = new GuildMusicManager(manager);
            musicManagers.put(id, musicManager);
        }

        guild.getAudioManager().setSendingHandler(musicManager.getSendHandler());
        return musicManager;
    }

    public void loadAndPlay(TextChannel channel, String trackURL) {
        GuildMusicManager musicManager = getGuildMusicManager(channel.getGuild());

        manager.loadItemOrdered(musicManager, trackURL, new AudioLoadResultHandler() {
            @Override
            public void trackLoaded(AudioTrack audioTrack) {
                EmbedBuilder eb = new EmbedBuilder();
                eb.addField(null, "Ich singe jetzt " + audioTrack.getInfo().title, false);
                channel.sendMessage(eb.build()).queue();
                play(musicManager, audioTrack);
            }

            @Override
            public void playlistLoaded(AudioPlaylist audioPlaylist) {
                AudioTrack firstTrack = audioPlaylist.getSelectedTrack();
                channel.sendMessage("Wird zur Warteschlange hinzugef√ºgt " + firstTrack.getInfo().title + "(first Track of playlist " + audioPlaylist.getName() + ")").queue();
            }

            @Override
            public void noMatches() {
                EmbedBuilder eb = new EmbedBuilder();
                eb.addField(null, "Es wurde nichts unter " + trackURL + " gefunden.", false);
                channel.sendMessage(eb.build()).queue();
            }

            @Override
            public void loadFailed(FriendlyException e) {
                EmbedBuilder eb = new EmbedBuilder();
                eb.addField(null, "Ich konnte " + e.getMessage() + " nicht vorsingen.", false);
                channel.sendMessage(eb.build()).queue();
            }
        });
    }

    private void play(GuildMusicManager musicManager, AudioTrack track) {
        musicManager.scheduler.queue(track);
    }
}